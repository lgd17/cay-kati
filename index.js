
const schedule = require('node-schedule');
const { pool } = require("./db");
const bot = require("./bot");
require("./server");
require('./cleanLogs'); // ‚¨ÖÔ∏è S'il est dans cleanLogs.js
// Forcer l‚Äôenvironnement √† utiliser l‚Äôheure de Lom√©
process.env.TZ = 'Africa/Lome';
const moment = require('moment-timezone');


const ADMIN_IDS = process.env.ADMIN_IDS.split(",").map(Number);
 


// ====== CONFIGURATION ENV ======
const port = process.env.PORT || 3000;
const token = process.env.TELEGRAM_TOKEN;
if (!token) throw new Error("‚ùå TELEGRAM_TOKEN non d√©fini !");
const baseUrl = process.env.BASE_URL; // ‚úÖ ‚úÖ ‚úÖ √† utiliser sur Render !
if (!baseUrl) throw new Error("‚ùå BASE_URL manquant dans .env !");

// ====== GESTION DES √âTATS ======
const pendingCoupon = {};
const pendingCustomRejects = {};
const userStates = {}; 
const fixedDeletionConfirmations = new Map();
const editFixedStates = {};
const userLang = {};
const fixedAddStates = {};
const fixedEditStates = {};
const editStates = {};

const adminId = process.env.TELEGRAM_ADMIN_ID;
const channelId = process.env.TELEGRAM_CHANNEL_ID;


//////////////////////////////////////////////////==== Menu ====\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
// === MENU ADMIN AVEC BOUTON INLINE ===
 
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const adminId = msg.from.id;

  if (!ADMIN_IDS.includes(adminId)) return;

  await bot.sendMessage(chatId, "üìã Menu d'administration :", {
    reply_markup: {
      inline_keyboard: [
        // Bloc principal
        [{ text: "üõ† Panel Admin", callback_data: "open_admin_panel" }],
        [{ text: "‚ûï Ajouter un prono", callback_data: "open_ajouter_prono" }],
        [{ text: "üìã Voir les pronos", callback_data: "open_voir_pronos" }],
        [{ text: "üìä Top Parrainage", callback_data: "open_topparrains" }],

        // S√©parateur
        [{ text: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data: "separator_1" }],

        // Messages automatiques
        [{ text: "üïí Ajouter msg auto", callback_data: "open_addmsg" }],
        [{ text: "üìÑ Voir messages auto", callback_data: "open_listmsg" }],
        [{ text: "‚ùå Supprimer messages auto", callback_data: "open_delmsg" }],
        [{ text: "üß∑ Ajouter message fixe", callback_data: "open_addfixedmsg" }],
        [{ text: "üìå Voir messages fixes", callback_data: "open_fixemsg" }],

        // S√©parateur
        [{ text: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data: "separator_2" }],

        // Publication canal
        [{ text: "üì¢ Publier dans le canal", callback_data: "open_resetpoints" }],
        [{ text: "‚úâÔ∏è Envoyer message canal", callback_data: "open_sendtocanal" }]
      ]
    }
  });
});

// === R√âACTIONS AUX BOUTONS DU MENU ===
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  if (!ADMIN_IDS.includes(userId)) return bot.answerCallbackQuery(query.id);

  switch (data) {
    case "open_admin_panel":
      bot.emit('text', { text: "/admin", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_ajouter_prono":
      bot.emit('text', { text: "/ajouter_prono", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_voir_pronos":
      bot.emit('text', { text: "/voir_pronos", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_addmsg":
      bot.emit('text', { text: "/addmsg", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_listmsg":
      bot.emit('text', { text: "/listmsg", chat: { id: chatId }, from: { id: userId } });
      break;
      case "open_delmsg":
      bot.emit('text', { text: "/delmsg", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_addfixedmsg":
      bot.emit('text', { text: "/addfixedmsg", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_fixemsg":
      bot.emit('text', { text: "/fixemsg", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_topparrains":
      bot.emit('text', { text: "/topparrains", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_resetpoints":
      bot.emit('text', { text: "/resetpoints", chat: { id: chatId }, from: { id: userId } });
      break;
    case "open_sendtocanal":
      bot.emit('text', { text: "/sendtocanal", chat: { id: chatId }, from: { id: userId } });
      break;
  }

  await bot.answerCallbackQuery(query.id);
});


/////////////////////////////////////////////////////////////////////////////////////////


//=== COMMANDE /ajouter_prono ===

bot.onText(/\/ajouter_prono/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId !== ADMIN_ID)
    return bot.sendMessage(chatId, "üö´ Commande r√©serv√©e √† l‚Äôadmin.");

  pendingCoupon[chatId] = { step: "awaiting_date" };
  bot.sendMessage(
    chatId,
    "üìÖ Pour quelle date est ce prono ?\nEx: 2025-06-06 ou tape /today"
  );
});

// Commande /today
bot.onText(/\/today/, (msg) => {
  const chatId = msg.chat.id;
  if (!pendingCoupon[chatId] || pendingCoupon[chatId].step !== "awaiting_date")
    return;

  const today = new Date().toISOString().slice(0, 10);
  pendingCoupon[chatId].date = today;
  pendingCoupon[chatId].step = "awaiting_content";
  bot.sendMessage(chatId, "üìù Envoie maintenant le texte du prono.");
});

// Commande /skip pour ignorer l'ajout de m√©dia
bot.onText(/\/skip/, async (msg) => {
  const chatId = msg.chat.id;
  const state = pendingCoupon[chatId];
  if (!state || state.step !== "awaiting_media") return;

  await insertManualCoupon(chatId, state.content, null, null, state.date, state.type);
  delete pendingCoupon[chatId];
  bot.sendMessage(chatId, "‚úÖ Prono sans m√©dia enregistr√©.");
});

// Gestion des messages (date, contenu, m√©dia)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const state = pendingCoupon[chatId];
  if (!state || msg.text?.startsWith("/")) return;

  if (state.step === "awaiting_date" && /^\d{4}-\d{2}-\d{2}$/.test(msg.text)) {
    const inputDate = new Date(msg.text);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (inputDate < today) {
      return bot.sendMessage(
        chatId,
        "‚ùå La date ne peut pas √™tre dans le pass√©. R√©essaie."
      );
    }

    state.date = msg.text;
    state.step = "awaiting_content";
    return bot.sendMessage(chatId, "üìù Envoie maintenant le texte du prono.");
  }

  if (state.step === "awaiting_content" && msg.text) {
    state.content = msg.text;
    state.step = "awaiting_confirmation";

    const recap = `üìù *R√©capitulatif du prono:*\nüìÖ Date: *${state.date}*\n‚úçÔ∏è Contenu: *${state.content}*\n\nSouhaites-tu continuer ?`;
    return bot.sendMessage(chatId, recap, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ Confirmer", callback_data: "confirm_prono" }],
          [{ text: "‚ùå Annuler", callback_data: "cancel_prono" }],
        ],
      },
    });
  }

  if (state.step === "awaiting_media") {
    if (msg.photo) {
      const fileId = msg.photo.at(-1).file_id;
      const fileUrl = await bot.getFileLink(fileId);
      await insertManualCoupon(chatId, state.content, fileUrl, "photo", state.date, state.type);
      delete pendingCoupon[chatId];
      return bot.sendMessage(chatId, "‚úÖ Prono avec photo enregistr√©.");
    }

    if (msg.video) {
      const fileId = msg.video.file_id;
      const fileUrl = await bot.getFileLink(fileId);
      await insertManualCoupon(chatId,state.content, fileUrl, "video", state.date, state.type);
      delete pendingCoupon[chatId];
      return bot.sendMessage(chatId, "‚úÖ Prono avec vid√©o enregistr√©.");
    }

    return bot.sendMessage(
      chatId,
      "‚ùå Envoie une *photo*, une *vid√©o* ou tape /skip.",
      { parse_mode: "Markdown" }
    );
  }
});

// Callback pour confirmer, annuler, ou choisir le type
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const state = pendingCoupon[chatId];
  if (!state) return bot.answerCallbackQuery(query.id);

  if (query.data === "confirm_prono") {
    state.step = "awaiting_type"; // nouvelle √©tape pour choisir le type
    await bot.sendMessage(chatId, "üéØ Choisis le type de prono :", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "Gratuit", callback_data: "type_gratuit" }],
          [{ text: "Premium", callback_data: "type_premium" }],
        ],
      },
    });
  }

  if (query.data === "cancel_prono") {
    delete pendingCoupon[chatId];
    await bot.sendMessage(chatId, "‚ùå Ajout du prono annul√©.");
  }

  if (state.step === "awaiting_type") {
    if (query.data === "type_gratuit" || query.data === "type_premium") {
      state.type = query.data === "type_gratuit" ? "gratuit" : "premium";
      state.step = "awaiting_media";
      await bot.sendMessage(
        chatId,
        "üìé Tu peux maintenant envoyer une *photo* ou une *vid√©o* pour ce prono.\nSinon tape /skip.",
        { parse_mode: "Markdown" }
      );
    }
  }

  await bot.answerCallbackQuery(query.id);
});
// ===================Fonction d'insertion dans la BDD (√† adapter)
async function insertManualCoupon(chatId, content, mediaUrl, mediaType, date, type = "gratuit") {
  try {
    await pool.query(`
      INSERT INTO daily_pronos (content, media_url, media_type, date, date_only, type)
      VALUES ($1, $2, $3, $4, $4::date, $5)
    `, [content, mediaUrl, mediaType, date, type]);

    if (mediaType === 'photo') {
      await bot.sendPhoto(chatId, mediaUrl, { caption: content });
    } else if (mediaType === 'video') {
      await bot.sendVideo(chatId, mediaUrl, { caption: content });
    } else {
      await bot.sendMessage(chatId, content);
    }

    await bot.sendMessage(chatId, `‚úÖ Coupon *${type.toUpperCase()}* ajout√© pour le ${date}`, {
      parse_mode: "Markdown"
    });

  } catch (err) {
    console.error("‚ùå Erreur lors de l'ajout manuel :", err);
    await bot.sendMessage(chatId, "‚ùå Erreur lors de l‚Äôajout du coupon.");
  }
}

//=== COMMANDE /voir_pronos ===

bot.onText(/\/voir_pronos/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!ADMIN_IDS.includes(userId))
    return bot.sendMessage(chatId, "‚õî Acc√®s r√©serv√© aux admins.");

  try {
    const { rows } = await pool.query(
      "SELECT * FROM daily_pronos ORDER BY id DESC LIMIT 5"
    );
    if (rows.length === 0)
      return bot.sendMessage(chatId, "Aucun prono trouv√©.");

    for (const row of rows) {
      const caption = `üÜî ${row.id}\nüìÖ ${row.date}\nüìù ${row.content}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: "‚úèÔ∏è Modifier", callback_data: `edit_${row.id}` },
            { text: "üóëÔ∏è Supprimer", callback_data: `delete_${row.id}` },
          ],
          [
            {
              text: "üöÄ Publier maintenant",
              callback_data: `postnow_${row.id}`,
            },
            { text: "üß™ Tester", callback_data: `test_${row.id}` },
          ],
        ],
      };

      if (row.media_url && row.media_type === "photo") {
        await bot.sendPhoto(chatId, row.media_url, {
          caption,
          reply_markup: keyboard,
        });
      } else if (row.media_url && row.media_type === "video") {
        await bot.sendVideo(chatId, row.media_url, {
          caption,
          reply_markup: keyboard,
        });
      } else {
        await bot.sendMessage(chatId, caption, { reply_markup: keyboard });
      }
    }
  } catch (err) {
    console.error("Erreur voir_pronos:", err);
    bot.sendMessage(chatId, "‚ùå Erreur lors de la r√©cup√©ration des pronos.");
  }
});

// ‚úÖ Callback g√©n√©ral centralis√©
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  const msgId = query.message.message_id;

  if (!ADMIN_IDS.includes(userId)) {
    return bot.answerCallbackQuery(query.id, { text: "‚õî Acc√®s refus√©." });
  }

  try {
    if (data.startsWith("delete_")) {
      const id = data.split("_")[1];
      await bot.editMessageReplyMarkup(
        {
          inline_keyboard: [
            [
              { text: "‚úÖ Confirmer", callback_data: `confirmdelete_${id}` },
              { text: "‚ùå Annuler", callback_data: `cancel` },
            ],
          ],
        },
        { chat_id: chatId, message_id: msgId }
      );
      return;
    }

    if (data.startsWith("confirmdelete_")) {
      const id = data.split("_")[1];
      await pool.query("DELETE FROM daily_pronos WHERE id = $1", [id]);
      await bot.editMessageText(`‚úÖ Prono ${id} supprim√©.`, {
        chat_id: chatId,
        message_id: msgId,
      });
      return;
    }

    if (data === "cancel") {
      await bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: chatId, message_id: msgId }
      );
      return;
    }

    if (data.startsWith("edit_")) {
      const id = data.split("_")[1];
      editStates[chatId] = { step: "editing", pronoId: id };
      await bot.sendMessage(
        chatId,
        `‚úçÔ∏è Envoie le nouveau texte pour le prono ID ${id}, ou tape /cancel pour annuler.`
      );
      return;
    }

    if (data.startsWith("test_")) {
      const id = data.split("_")[1];
      const { rows } = await pool.query(
        "SELECT * FROM daily_pronos WHERE id = $1",
        [id]
      );
      const prono = rows[0];
      if (!prono) return;

      const caption = `üÜî ${prono.id}\nüìÖ ${prono.date}\nüìù ${prono.content}`;
      if (prono.media_url && prono.media_type === "photo") {
        await bot.sendPhoto(chatId, prono.media_url, { caption });
      } else if (prono.media_url && prono.media_type === "video") {
        await bot.sendVideo(chatId, prono.media_url, { caption });
      } else {
        await bot.sendMessage(chatId, caption);
      }
      return;
    }

    if (data.startsWith("postnow_")) {
      const id = data.split("_")[1];
      const { rows } = await pool.query(
        "SELECT * FROM daily_pronos WHERE id = $1",
        [id]
      );
      const prono = rows[0];
      if (!prono) return;

      const caption = `üì¢ PRONOSTIC DU JOUR\n\nüÜî ${prono.id}\nüìÖ ${prono.date}\nüìù ${prono.content}`;
      if (prono.media_url && prono.media_type === "photo") {
        await bot.sendPhoto(CANAL_ID, prono.media_url, { caption });
      } else if (prono.media_url && prono.media_type === "video") {
        await bot.sendVideo(CANAL_ID, prono.media_url, { caption });
      } else {
        await bot.sendMessage(CANAL_ID, caption);
      }
      await bot.sendMessage(chatId, `‚úÖ Prono ${id} publi√© dans le canal.`);
      return;
    }

    if (data === "confirm_prono") {
      if (pendingCoupon[chatId]) {
        pendingCoupon[chatId].step = "awaiting_media";
        await bot.sendMessage(
          chatId,
          "üìé Envoie une *photo* ou *vid√©o* ou tape /skip.",
          { parse_mode: "Markdown" }
        );
      }
      return;
    }

    if (data === "cancel_prono") {
      delete pendingCoupon[chatId];
      await bot.sendMessage(chatId, "‚ùå Ajout du prono annul√©.");
      return;
    }

    // ‚úÖ Pour toute autre donn√©e inconnue => ne rien faire, ignorer
    return;
  } catch (err) {
    console.error("Erreur callback:", err);
    bot.sendMessage(chatId, "‚ùå Une erreur est survenue.");
  }
});



/////////////////////////////////////////////////////////////////////////////////////////

// Envoyer un message dans un canal

bot.onText(/\/sendtocanal/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // V√©rifie que seul toi (l'admin) peux l'utiliser
  if (userId !== 6248838967)
    return bot.sendMessage(chatId, "‚ùå Commande r√©serv√©e √† l‚Äôadmin.");

  bot.sendMessage(
    channelId,
    "üî• Ceci est un message du bot envoy√© dans le canal !"
  );
  bot.sendMessage(chatId, "‚úÖ Message envoy√© au canal.");
});

// Testemessage
bot.onText(/\/testmessage/, async (msg) => {
  const chatId = msg.chat.id;
  const ADMIN_ID = 6248838967; // Remplace par ton vrai ID Telegram

  if (msg.from.id !== ADMIN_ID) {
    return bot.sendMessage(chatId, "‚õîÔ∏è Acc√®s refus√©.");
  }

  try {
    const { rows } = await pool.query(`
      SELECT * FROM messages_auto
      WHERE DATE(send_date) = CURRENT_DATE AND sent_today = false
    `);

    if (rows.length === 0) {
      await bot.sendMessage(
        chatId,
        "‚ùå Aucun message disponible pour aujourd‚Äôhui."
      );
      return;
    }

    for (const message of rows) {
      await envoyerMessageComplet(bot, chatId, message);

      await pool.query(
        `UPDATE messages_auto SET sent_today = true WHERE id = $1`,
        [message.id]
      );
    }
  } catch (error) {
    console.error("‚ùå Erreur test message :", error.message);
    await bot.sendMessage(chatId, "‚ùå Une erreur est survenue.");
  }
});

// Fonctin table
async function envoyerMessageComplet(bot, chatId, message) {
  const caption = message.media_text
    ? `${message.media_text}\n\n${message.contenu}`
    : message.contenu;

  if (message.media_url) {
    // Envoi avec m√©dia (image ou vid√©o)
    if (message.media_url.match(/\.(jpg|jpeg|png|gif)$/i)) {
      await bot.sendPhoto(chatId, message.media_url, { caption });
    } else if (message.media_url.match(/\.(mp4|mov|webm)$/i)) {
      await bot.sendVideo(chatId, message.media_url, { caption });
    } else {
      // URL non reconnue comme image ou vid√©o ‚Üí fallback
      await bot.sendMessage(chatId, `${caption}\n\nüîó ${message.media_url}`);
    }
  } else {
    // Pas de m√©dia ‚Üí simple message texte
    await bot.sendMessage(chatId, caption);
  }
}


/////////////////////////////////////// ‚úÖ VOIRE LE CLASSEMENT DE PARRAIN ‚úÖ\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//=== COMMANDE /topparrains ====


bot.onText(/\/topparrains/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const { rows } = await pool.query(`
      SELECT u1.id, u1.username, u1.firstname, COUNT(u2.id) AS filleuls, u1.points
      FROM users u1
      LEFT JOIN users u2 ON u1.id = u2.referral_id
      GROUP BY u1.id
      ORDER BY filleuls DESC, u1.points DESC
      LIMIT 5
    `);

    if (rows.length === 0) {
      return bot.sendMessage(chatId, "Aucun parrain actif pour le moment.");
    }

    let message = "üèÜ *Top 5 Parrains de la semaine :*\n\n";
    rows.forEach((row, index) => {
      const nom = row.username
        ? `@${row.username}`
        : row.firstname || "Anonyme";
      message += `ü•á *${index + 1}. ${nom}* ‚Äî ${row.filleuls} filleul(s), ${row.points} pts\n`;
    });

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("Erreur /topparrains :", error);
    bot.sendMessage(chatId, "‚ùå Impossible d'afficher le classement.");
  }
});

const CHANNEL_ID = "@linktree_free_prediction";

// ‚úÖ Classement automatique tous les dimanches √† 18h (heure Lom√©)
schedule.scheduleJob({ hour: 18, minute: 0, dayOfWeek: 0 }, async () => {
  const now = moment().tz('Africa/Lome').format("YYYY-MM-DD HH:mm:ss");
  console.log("üïí Envoi automatique Top 5 (hebdo) √† :", now);

  try {
    const { rows } = await pool.query(`
      SELECT u1.id, u1.username, u1.firstname, COUNT(u2.id) AS filleuls, u1.points
      FROM users u1
      LEFT JOIN users u2 ON u1.id = u2.referral_id
      GROUP BY u1.id
      ORDER BY filleuls DESC, u1.points DESC
      LIMIT 5
    `);

    if (rows.length === 0) return;

    let message = "üì¢ *Classement des meilleurs parrains de la semaine !*\n\n";
    rows.forEach((row, index) => {
      const nom = row.username
        ? `@${row.username}`
        : row.firstname || "Anonyme";
      message += `üèÖ *${index + 1}. ${nom}* ‚Äî ${row.filleuls} filleul(s), ${row.points} pts\n`;
    });

    message += `\nüïí Envoy√© √† ${moment().tz("Africa/Lome").format("HH:mm")} (heure Lom√©)`;

    bot.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("Erreur classement auto :", error);
  }
});

const TELEGRAM_CHANNEL_ID = "@linktree_free_prediction";

// üîÅ Fonction pour publier le Top 5 mensuel et reset les points
async function publierClassementEtReset() {
  try {
    const { rows: topUsers } = await pool.query(`
      SELECT id, username, firstname, points
      FROM users
      ORDER BY points DESC
      LIMIT 5
    `);

    if (topUsers.length === 0) {
      await bot.sendMessage(
        TELEGRAM_CHANNEL_ID,
        "Aucun parrain n‚Äôa encore de points ce mois-ci."
      );
      return;
    }

    let message = "üèÜ *Classement des 5 meilleurs parrains du mois :*\n\n";
    const emojis = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"];

    topUsers.forEach((user, index) => {
      const nom = user.username
        ? `@${user.username}`
        : user.firstname
        ? user.firstname
        : `Utilisateur ${user.id}`;
      message += `${emojis[index]} ${nom} ‚Äî *${user.points} points*\n`;
    });

    message += `\nüéÅ Les r√©compenses seront distribu√©es automatiquement !

üö® NOUVEAU MOIS = NOUVEAU D√âFI !

ü•á Tous les *points de parrainage* ont √©t√© remis √† z√©ro !

üîÑ C‚Äôest le moment de te lancer √† fond :
- Invite tes amis üí¨
- Grimpe dans le classement üìà
- R√©cup√®re un max de *r√©compenses* üéÅ

üèÜ Les 5 meilleurs parrains du mois gagneront :
- 10 000 FC chacun üí∏
- 2 *coupons exclusifs VIP* üé´

üî• *Le compteur est reparti de z√©ro. Ne perds pas une seconde !*`;

    // üîπ Envoi dans le canal
    await bot.sendMessage(TELEGRAM_CHANNEL_ID, message, {
      parse_mode: "Markdown",
    });

    // üîπ Reset des points
    await pool.query("UPDATE users SET points = 0");
    console.log("‚úÖ Points remis √† z√©ro le", moment().tz("Africa/Lome").format("YYYY-MM-DD HH:mm:ss"));
  } catch (err) {
    console.error("‚ùå Erreur dans publierClassementEtReset :", err);
  }
}

// ‚úÖ Reset des points chaque 1er du mois √† 00h00 (heure Lom√©)
schedule.scheduleJob({ hour: 0, minute: 0, date: 1 }, () => {
  const now = moment().tz('Africa/Lome').format("YYYY-MM-DD HH:mm:ss");
  console.log("üìÜ D√©but de la t√¢che mensuelle (reset points) √† :", now);
  publierClassementEtReset();
});


/////////////////////////////////////////////////////////////////////////////////////////

// ‚úÖ Commande admin pour tester √† la main
bot.onText(/\/resetpoints/, async (msg) => {
  if (msg.from.id !== ADMIN_ID) return;
  await publierClassementEtReset();
  bot.sendMessage(msg.chat.id, "‚úÖ Classement publi√© et points remis √† z√©ro !");
});


/////////////////////////////////////////////////////////////////////////////////////////

// === COMMANDES ===
bot.onText(/\/admin/, async (msg) => {
  if (!ADMIN_IDS.includes(msg.from.id)) return;

  try {
    const { rows } = await pool.query("SELECT * FROM pending_verifications");
    if (rows.length === 0)
      return bot.sendMessage(msg.chat.id, "‚úÖ Aucune v√©rification en attente.");

    for (const row of rows) {
      const text = `üßæ <b>Nouvelle demande</b>\nüë§ @${row.username} (ID: ${row.telegram_id})\nüì± Bookmaker: ${row.bookmaker}\nüí∞ Montant: ${row.amount} FCFA\nüÜî D√©p√¥t: <code>${row.deposit_id}</code>`;

      const opts = {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ Valider", callback_data: `validate_${row.telegram_id}` },
              { text: "‚ùå Rejeter", callback_data: `reject_${row.telegram_id}` }
            ]
          ]
        }
      };

      await bot.sendMessage(msg.chat.id, text, opts);
    }
  } catch (err) {
    console.error("Erreur /admin:", err);
  }
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const adminId = query.from.id;

  if (!ADMIN_IDS.includes(adminId)) return;

  const data = query.data;

  if (data.startsWith("validate_")) {
    const telegramId = data.split("_")[1];

    try {
      const { rows } = await pool.query("SELECT * FROM pending_verifications WHERE telegram_id = $1", [telegramId]);
      if (rows.length === 0) return;

      const user = rows[0];

      await pool.query("INSERT INTO verified_users (telegram_id, username, bookmaker, deposit_id, amount) VALUES ($1,$2,$3,$4,$5)", [
        user.telegram_id,
        user.username,
        user.bookmaker,
        user.deposit_id,
        user.amount
      ]);

     await pool.query("DELETE FROM pending_verifications WHERE telegram_id = $1", [telegramId]);

await bot.sendMessage(user.telegram_id, `‚úÖ Ton compte a √©t√© valid√© avec succ√®s !`, {
  reply_markup: {
    keyboard: [["üéØ Pronostics du jour"]],
    resize_keyboard: true,
    one_time_keyboard: true
  }
});

await bot.sendMessage(chatId, `‚úÖ Validation de @${user.username} confirm√©e.`);
} catch (err) {
      console.error("Erreur de validation:", err);
    }
  }


  if (data.startsWith("reject_")) {
    const telegramId = data.split("_")[1];

    const motifs = [
      [{ text: "üîª D√©p√¥t insuffisant", callback_data: `motif1_${telegramId}` }],
      [{ text: "‚õîÔ∏è ID non li√© au code P999X", callback_data: `motif2_${telegramId}` }],
      [{ text: "üìù Autres raisons", callback_data: `motif3_${telegramId}` }]
    ];

    return bot.editMessageReplyMarkup(
      { inline_keyboard: motifs },
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }

  if (data.startsWith("motif1_") || data.startsWith("motif2_")) {
    const [motif, telegramId] = data.split("_");
    const reason =
      motif === "motif1"
        ? "‚ùå Rejet√© : d√©p√¥t insuffisant."
        : "‚ùå Rejet√© : cet ID de d√©p√¥t n‚Äôest pas li√© au code promo P999X.";

    await pool.query("DELETE FROM pending_verifications WHERE telegram_id = $1", [telegramId]);

    await bot.sendMessage(telegramId, reason);
    await bot.sendMessage(telegramId, `üîÅ Tu peux recommencer la proc√©dure.`, {
      reply_markup: {
        keyboard: [["üîÅ recommencer"]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });

    return bot.sendMessage(chatId, `üö´ Rejet envoy√© √† l'utilisateur.`);
  }

  if (data.startsWith("motif3_")) {
    const telegramId = data.split("_")[1];

    pendingCustomRejects[adminId] = telegramId;

    return bot.sendMessage(chatId, "‚úçÔ∏è Envoie manuellement le motif de rejet pour l‚Äôutilisateur.");
  }
});

// R√©ception d‚Äôun motif personnalis√©
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  // üîÅ recommencer
  if (text === "üîÅ recommencer") {
    userStates[chatId] = { step: "await_bookmaker" };

    return bot.sendMessage(chatId, "üîê Pour acc√©der aux pronostics, indique ton bookmaker :", {
      reply_markup: {
        keyboard: [["1xbet", "888starz"], ["melbet", "winwin"]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
  }

  if (text === "üÜò contacter l'assistance") {
    return bot.sendMessage(chatId, "üì© Contacte notre √©quipe ici : [@Support_1XBOOM](https://t.me/Catkatii)", {
      parse_mode: "Markdown",
      disable_web_page_preview: true
    });
  }



bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;

  if (query.data === "get_prono") {
    try {
      // Supprime le bouton inline apr√®s clic
      await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });

      // R√©cup√®re la date du jour au format YYYY-MM-DD
      const today = new Date().toISOString().slice(0, 10);

      // Recherche le coupon du jour
      const res = await pool.query(
        "SELECT content FROM daily_pronos WHERE date = $1 LIMIT 1",
        [today]
      );

      if (res.rows.length === 0) {
        await bot.sendMessage(chatId, "‚ö†Ô∏è Le pronostic du jour n'est pas encore disponible.");
      } else {
        const coupon = res.rows[0].content;

        // Envoie le coupon du jour
        await bot.sendMessage(chatId, `üéØ Pronostic du jour :\n\n${coupon}`, {
          parse_mode: "Markdown"
        });

        // Affiche le menu principal avec 3 boutons
        await bot.sendMessage(chatId, "üìã Menu principal :", {
          reply_markup: {
            keyboard: [["üèÜ Mes Points", "ü§ù Parrainage"], ["üÜò Assistance"]
            ],
            resize_keyboard: true
          }
        });
      }
    } catch (error) {
      console.error("Erreur lors de l'envoi du pronostic :", error);
      await bot.sendMessage(chatId, "‚ùå Une erreur est survenue, r√©essaie plus tard.");
    }
  }
});

  // Gestion du motif personnalis√©
  const pendingId = pendingCustomRejects[chatId];
  if (pendingId) {
    try {
      await pool.query("DELETE FROM pending_verifications WHERE telegram_id = $1", [pendingId]);

      await bot.sendMessage(pendingId, `‚ùå Rejet√© : ${text}`);
      await bot.sendMessage(
        pendingId,
        `üîÅ Tu peux recommencer la proc√©dure ou contacter l‚Äôassistance.`,
        {
          reply_markup: {
            keyboard: [["üîÅ recommencer", "üÜò contacter l'assistance"]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );

      await bot.sendMessage(chatId, `üîî Motif personnalis√© envoy√© √† l‚Äôutilisateur.`);
    } catch (err) {
      console.error("Erreur motif personnalis√© :", err);
      await bot.sendMessage(chatId, "‚ùå Une erreur est survenue lors du rejet.");
    }

    delete pendingCustomRejects[chatId];
  }
});


/////////////////////////////////////xxxxxxxxxxxxxxxxx////////////////////////////////////////////////////





/////////////////////////////////////////////////////////////////////////////////////////


// LIRE_MESSAGE-AUTO
bot.onText(/\/listmsg/, async (msg) => {
  if (msg.from.id.toString() !== adminId) {
    return bot.sendMessage(
      msg.chat.id,
      "‚õî Tu n'es pas autoris√© √† voir cette liste."
    );
  }

  try {
    const { rows } = await pool.query(
      `SELECT id, contenu, send_date, media_url FROM messages_auto
       WHERE send_date::date = CURRENT_DATE
       ORDER BY send_date ASC`
    );

    if (rows.length === 0) {
      return bot.sendMessage(
        msg.chat.id,
        "üì≠ Aucun message pr√©vu pour aujourd‚Äôhui."
      );
    }

    let response = `üìã *Messages programm√©s aujourd‚Äôhui*:\n\n`;

    for (const row of rows) {
      const shortText =
        row.contenu.length > 25 ? row.contenu.slice(0, 25) + "‚Ä¶" : row.contenu;
      const heure = dayjs(row.send_date).format("HH:mm");
      response += `üÜî ${row.id} | üïí ${heure} | ${
        row.media_url ? "üìé Media" : "üìù Texte"
      }\n‚û°Ô∏è ${shortText}\n\n`;
    }

    bot.sendMessage(msg.chat.id, response, { parse_mode: "Markdown" });
  } catch (err) {
    console.error(err);
    bot.sendMessage(
      msg.chat.id,
      "‚ùå Erreur lors de la r√©cup√©ration des messages."
    );
  }
});

/////////////////////////////////////////////////////////////////////////////////////////

// SUPPRIM√â MESSAGE PROGRAMME
const pendingDeletions = new Map(); // Pour suivre les demandes de suppression en attente

bot.onText(/\/delmsg (\d+)/, async (msg, match) => {
  const userId = msg.from.id.toString();
  const messageId = match[1];

  if (userId !== adminId) {
    return bot.sendMessage(msg.chat.id, "‚õî Tu n'es pas autoris√© √† faire √ßa.");
  }

  // V√©rifie si l'ID existe
  const { rows } = await pool.query(
    "SELECT * FROM messages_auto WHERE id = $1",
    [messageId]
  );
  if (rows.length === 0) {
    return bot.sendMessage(
      msg.chat.id,
      `‚ùå Aucun message trouv√© avec l‚ÄôID ${messageId}.`
    );
  }

  // Stocke la demande en attente
  pendingDeletions.set(userId, messageId);

  bot.sendMessage(
    msg.chat.id,
    `üóëÔ∏è Es-tu s√ªr de vouloir supprimer le message ID ${messageId} ?`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ Confirmer", callback_data: "confirm_delete" },
            { text: "‚ùå Annuler", callback_data: "cancel_delete" },
          ],
        ],
      },
    }
  );
});

// R√âPONSE OUI/NON
bot.on("callback_query", async (query) => {
  const userId = query.from.id.toString();
  const action = query.data;
  const chatId = query.message.chat.id;

  if (!pendingDeletions.has(userId)) {
    return bot.answerCallbackQuery(query.id, {
      text: "Aucune suppression en attente.",
    });
  }

  const messageId = pendingDeletions.get(userId);

  if (action === "confirm_delete") {
    try {
      await pool.query("DELETE FROM messages_auto WHERE id = $1", [messageId]);
      pendingDeletions.delete(userId);

      await bot.editMessageText(
        `‚úÖ Message ID ${messageId} supprim√© avec succ√®s.`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
        }
      );
    } catch (err) {
      console.error(err);
      await bot.sendMessage(
        chatId,
        "‚ùå Une erreur est survenue pendant la suppression."
      );
    }
  } else if (action === "cancel_delete") {
    pendingDeletions.delete(userId);
    await bot.editMessageText("‚ùå Suppression annul√©e.", {
      chat_id: chatId,
      message_id: query.message.message_id,
    });
  }

  bot.answerCallbackQuery(query.id); // Pour faire dispara√Ætre le loading
});


/////////////////////////////////////////////////////////////////////////////////////////


const { Client } = require("pg");
const dayjs = require("dayjs");

bot.onText(/\/addmsg/, (msg) => {
  if (msg.from.id.toString() !== adminId) {
    return bot.sendMessage(msg.chat.id, "‚ùå Tu n'as pas l'autorisation.");
  }

  userStates[msg.from.id] = { step: 1 };
  bot.sendMessage(
    msg.chat.id,
    "‚úèÔ∏è Envoie le **contenu du message** √† programmer."
  );
});

bot.on("message", async (msg) => {
  const userId = msg.from.id;
  const state = userStates[userId];

  if (!state || msg.text?.startsWith("/")) return;

  const chatId = msg.chat.id;

  // √âtape 1 : contenu texte
  if (state.step === 1) {
    state.contenu = msg.text;
    state.step = 2;
    return bot.sendMessage(
      chatId,
      "üìé Envoie un **m√©dia** (image, vid√©o, audio, voice) OU tape `non` si tu n'en veux pas."
    );
  }

  // √âtape 2 : m√©dia ou 'non'
  if (state.step === 2) {
    if (msg.text && msg.text.toLowerCase() === "non") {
      state.media_url = null;
      state.media_type = null;
    } else if (msg.photo) {
      const fileId = msg.photo[msg.photo.length - 1].file_id;
      state.media_url = fileId;
      state.media_type = "photo";
    } else if (msg.video) {
      state.media_url = msg.video.file_id;
      state.media_type = "video";
    } else if (msg.voice) {
      state.media_url = msg.voice.file_id;
      state.media_type = "voice";
    } else if (msg.audio) {
      state.media_url = msg.audio.file_id;
      state.media_type = "audio";
    } else if (msg.text && msg.text.startsWith("http")) {
      state.media_url = msg.text;
      state.media_type = null; // Lien direct, type inconnu
    } else {
      return bot.sendMessage(
        chatId,
        "‚õî Format non reconnu. Envoie une image, une vid√©o, un audio, un vocal ou tape `non`."
      );
    }

    state.step = 3;
    return bot.sendMessage(
      chatId,
      "üïí √Ä quelle heure envoyer ? Format `HH:MM` (ex : `08:30`, `20:15`)."
    );
  }

  // √âtape 3 : heure d‚Äôenvoi
  if (state.step === 3) {
    const timeInput = msg.text.trim();
    const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;

    if (!timeRegex.test(timeInput)) {
      return bot.sendMessage(
        chatId,
        "‚õî Format invalide. Utilise HH:MM (ex : `09:30`, `22:00`)."
      );
    }

    const [hour, minute] = timeInput.split(":");
    const now = dayjs();
    let sendDate = now
      .hour(Number(hour))
      .minute(Number(minute))
      .second(0)
      .millisecond(0);

    if (sendDate.isBefore(now)) {
      sendDate = sendDate.add(1, "day");
    }

    try {
      await pool.query(
        `INSERT INTO messages_auto (contenu, media_url, media_type, send_date) VALUES ($1, $2, $3, $4)`,
        [state.contenu, state.media_url, state.media_type, sendDate.toDate()]
      );

      const resume = `‚úÖ Message enregistr√© avec succ√®s :\nüìù Texte : ${state.contenu}\nüéû M√©dia : ${state.media_type || "Aucun"}\nüïí Envoi pr√©vu : ${sendDate.format("HH:mm")} (${sendDate.format("DD/MM/YYYY")})`;

      await bot.sendMessage(chatId, resume);
    } catch (err) {
      console.error(err);
      await bot.sendMessage(
        chatId,
        "‚ùå Erreur lors de l'enregistrement du message."
      );
    }

    delete userStates[userId];
  }
});


/////////////////////////////////////////////////////////////////////////////////////////



bot.onText(/\/addfixedmsg/, (msg) => {
  if (msg.from.id.toString() !== adminId) return;
  fixedAddStates[msg.from.id] = { step: 1 };
  bot.sendMessage(msg.chat.id, "üìù Envoie le *texte du message fixe*.", {
    parse_mode: "Markdown",
  });
});

//=== COMMANDE /editfixedmsg ===

bot.onText(/\/editfixedmsg (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const id = parseInt(match[1]);

  if (userId.toString() !== adminId)
    return bot.sendMessage(chatId, "‚õî Tu n'as pas l'autorisation.");

  try {
    const { rows } = await pool.query(
      "SELECT * FROM message_fixes WHERE id = $1",
      [id]
    );
    if (rows.length === 0)
      return bot.sendMessage(chatId, "‚ùå Message introuvable.");

    fixedEditStates[userId] = { id, step: 1 };
    bot.sendMessage(chatId, "üìù Envoie le nouveau *texte du message*.", {
      parse_mode: "Markdown",
    });
  } catch (err) {
    console.error(err);
    bot.sendMessage(chatId, "‚ùå Erreur lors de la r√©cup√©ration du message.");
  }
});

// ====== GESTION DES MESSAGES POUR AJOUT / √âDITION =======
bot.on("message", async (msg) => {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  const editState = fixedEditStates[userId];
  const addState = fixedAddStates[userId];
  if ((!editState && !addState) || msg.text?.startsWith("/")) return;

  const handleMedia = (state, msg) => {
    if (msg.text && msg.text.toLowerCase() === "non") {
      state.media_url = null;
      state.media_type = null;
    } else if (msg.photo) {
      state.media_url = msg.photo.at(-1).file_id;
      state.media_type = "photo";
    } else if (msg.video) {
      state.media_url = msg.video.file_id;
      state.media_type = "video";
    } else if (msg.voice) {
      state.media_url = msg.voice.file_id;
      state.media_type = "voice";
    } else if (msg.audio) {
      state.media_url = msg.audio.file_id;
      state.media_type = "audio";
    } else if (msg.text && msg.text.startsWith("http")) {
      state.media_url = msg.text;
      state.media_type = null;
    } else {
      return false;
    }
    return true;
  };

  if (editState) {
    if (editState.step === 1) {
      editState.media_text = msg.text;
      editState.step = 2;
      return bot.sendMessage(
        chatId,
        "üìé Envoie le *nouveau m√©dia* (photo, vid√©o, voix ou lien) ou tape `non`.",
        { parse_mode: "Markdown" }
      );
    }
    if (editState.step === 2) {
      if (!handleMedia(editState, msg))
        return bot.sendMessage(chatId, "‚õî Format non reconnu. R√©essaie.");
      editState.step = 3;
      return bot.sendMessage(
        chatId,
        "üïí Envoie les *heures* (ex : `06:00,08:00`)",
        { parse_mode: "Markdown" }
      );
    }
    if (editState.step === 3) {
      const heures = msg.text.split(",").map((h) => h.trim());
      const isValid = heures.every((h) =>
        /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(h)
      );
      if (!isValid)
        return bot.sendMessage(chatId, "‚ùå Format d'heure invalide.");
      editState.heures = heures.join(",");

      const resume = `üìù *R√©capitulatif :*\nüÜî ID : ${editState.id}\nüìÑ Texte : ${editState.media_text}\nüéû M√©dia : ${editState.media_url ? "Oui" : "Aucun"}\n‚è∞ Heures : ${editState.heures}`;
      bot.sendMessage(chatId, resume, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ Confirmer", callback_data: "confirm_edit" },
              { text: "‚ùå Annuler", callback_data: "cancel_edit" },
            ],
          ],
        },
      });
      editState.step = 4;
    }
    return;
  }

  if (addState) {
    if (addState.step === 1) {
      addState.media_text = msg.text;
      addState.step = 2;
      return bot.sendMessage(
        chatId,
        "üìé Envoie le *m√©dia* (photo, vid√©o, voix ou lien) ou tape `non`.",
        { parse_mode: "Markdown" }
      );
    }
    if (addState.step === 2) {
      if (!handleMedia(addState, msg))
        return bot.sendMessage(chatId, "‚õî Format non reconnu. R√©essaie.");
      addState.step = 3;
      return bot.sendMessage(
        chatId,
        "üïí Envoie les *heures* (ex : `06:00,08:00`)",
        { parse_mode: "Markdown" }
      );
    }
    if (addState.step === 3) {
      const heures = msg.text.split(",").map((h) => h.trim());
      const isValid = heures.every((h) =>
        /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(h)
      );
      if (!isValid)
        return bot.sendMessage(chatId, "‚ùå Format d'heure invalide.");
      addState.heures = heures.join(",");

      const resume = `üÜï *Nouveau message fixe :*\nüìÑ Texte : ${addState.media_text}\nüéû M√©dia : ${addState.media_url ? "Oui" : "Aucun"}\n‚è∞ Heures : ${addState.heures}`;
      bot.sendMessage(chatId, resume, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ Enregistrer", callback_data: "confirm_add" },
              { text: "‚ùå Annuler", callback_data: "cancel_add" },
            ],
          ],
        },
      });
      addState.step = 4;
    }
  }
});

// ‚úÖ MISE √Ä JOUR CALLBACK QUERIES POUR AJOUTER media_type DANS LA BDD
bot.on("callback_query", async (query) => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;
  const data = query.data;
  const editState = fixedEditStates[userId];
  const addState = fixedAddStates[userId];

  if (data === "confirm_edit" && editState) {
    try {
      await pool.query(
        "UPDATE message_fixes SET media_text=$1, media_url=$2, media_type=$3, heures=$4 WHERE id=$5",
        [
          editState.media_text,
          editState.media_url,
          editState.media_type,
          editState.heures,
          editState.id,
        ]
      );
      await bot.sendMessage(chatId, "‚úÖ Message modifi√© !");
    } catch (err) {
      console.error(err);
      await bot.sendMessage(chatId, "‚ùå Erreur lors de la modification.");
    }
    delete fixedEditStates[userId];
  }

  if (data === "cancel_edit" && editState) {
    await bot.sendMessage(chatId, "‚ùå Modification annul√©e.");
    delete fixedEditStates[userId];
  }

  if (data === "confirm_add" && addState) {
    try {
      await pool.query(
        "INSERT INTO message_fixes (media_text, media_url, media_type, heures) VALUES ($1, $2, $3, $4)",
        [
          addState.media_text,
          addState.media_url,
          addState.media_type,
          addState.heures,
        ]
      );
      await bot.sendMessage(chatId, "‚úÖ Message ajout√© !");
    } catch (err) {
      console.error(err);
      await bot.sendMessage(chatId, "‚ùå Erreur lors de l'ajout.");
    }
    delete fixedAddStates[userId];
  }

  if (data === "cancel_add" && addState) {
    await bot.sendMessage(chatId, "‚ùå Ajout annul√©.");
    delete fixedAddStates[userId];
  }
});

bot.on("callback_query", async (query) => {
  try {
    const data = query.data;
    const chatId = query.message.chat.id;
    const userId = query.from.id;

    // ‚úÖ Test du message fixe
    if (data.startsWith("testfixed_")) {
      const id = data.split("_")[1];
      const { rows } = await pool.query("SELECT * FROM message_fixes WHERE id = $1", [id]);
      const row = rows[0];
      if (!row) {
        await bot.sendMessage(chatId, "‚ùå Message introuvable.");
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: "üì¢ Publier maintenant", callback_data: `publishfixed_${id}` },
            { text: "‚ùå Annuler", callback_data: "cancel_publishfixed" },
          ],
        ],
      };

      switch (row.media_type) {
        case "photo":
          await bot.sendPhoto(chatId, row.media_url, {
            caption: row.media_text,
            reply_markup: keyboard,
          });
          break;
        case "video":
          await bot.sendVideo(chatId, row.media_url, {
            caption: row.media_text,
            reply_markup: keyboard,
          });
          break;
        case "voice":
          await bot.sendVoice(chatId, row.media_url);
          await bot.sendMessage(chatId, row.media_text, { reply_markup: keyboard });
          break;
        case "audio":
          await bot.sendAudio(chatId, row.media_url);
          await bot.sendMessage(chatId, row.media_text, { reply_markup: keyboard });
          break;
        default:
          await bot.sendMessage(chatId, row.media_text, { reply_markup: keyboard });
          break;
      }
    }

    // ‚úÖ Publication dans le canal
    else if (data.startsWith("publishfixed_")) {
      const id = data.split("_")[1];
      const { rows } = await pool.query("SELECT * FROM message_fixes WHERE id = $1", [id]);
      const row = rows[0];
      if (!row) {
        await bot.sendMessage(chatId, "‚ùå Message introuvable.");
        return;
      }

      switch (row.media_type) {
        case "photo":
          await bot.sendPhoto(channelId, row.media_url, { caption: row.media_text });
          break;
        case "video":
          await bot.sendVideo(channelId, row.media_url, { caption: row.media_text });
          break;
        case "voice":
          await bot.sendVoice(channelId, row.media_url);
          await bot.sendMessage(channelId, row.media_text);
          break;
        case "audio":
          await bot.sendAudio(channelId, row.media_url);
          await bot.sendMessage(channelId, row.media_text);
          break;
        default:
          if (row.media_url?.startsWith("http")) {
            await bot.sendMessage(channelId, `${row.media_text}\nüîó ${row.media_url}`);
          } else {
            await bot.sendMessage(channelId, row.media_text);
          }
          break;
      }

      await bot.sendMessage(chatId, "‚úÖ Message publi√© dans le canal.");
    }

    // ‚úÖ Annulation de la publication
    else if (data === "cancel_publishfixed") {
      await bot.sendMessage(chatId, "‚ùå Publication annul√©e.");
    }

    // ‚úÖ Suppression du message fixe
    else if (data.startsWith("deletefixed_")) {
      if (userId.toString() !== adminId) {
        await bot.answerCallbackQuery(query.id, { text: "üö´ Action non autoris√©e." });
        return;
      }

      const id = data.split("_")[1];
      await pool.query("DELETE FROM message_fixes WHERE id = $1", [id]);
      await bot.sendMessage(chatId, `‚úÖ Message #${id} supprim√©.`);
    }

    // ‚úÖ Toujours r√©pondre au callback
    await bot.answerCallbackQuery(query.id);

  } catch (err) {
    console.error("‚ùå Erreur dans callback_query:", err);
    await bot.sendMessage(query.message.chat.id, "‚ö†Ô∏è Une erreur est survenue.");
  }
});


/////////////////////////////////////////////////////////////////////////////////////////

//=== COMMANDE /fixedmenu ===

bot.onText(/\/fixedmenu/, async (msg) => {
  if (msg.from.id.toString() !== adminId) return;

  try {
    const { rows } = await pool.query(
      "SELECT * FROM message_fixes ORDER BY id"
    );
    if (rows.length === 0) {
      return bot.sendMessage(msg.chat.id, "üì≠ Aucun message fixe trouv√©.");
    }

    for (const row of rows) {
      const mediaInfo = row.media_url ? "üéû Oui" : "‚ùå Aucun";
      const text = `üÜî ID: ${row.id}\nüìÑ Texte: ${row.media_text}\nüéû M√©dia: ${mediaInfo}\n‚è∞ Heures: ${row.heures}`;
      const buttons = [
        [{ text: "‚úèÔ∏è Modifier", callback_data: `editfixed_${row.id}` }],
        [{ text: "üóë Supprimer", callback_data: `deletefixed_${row.id}` }],
        [{ text: "üß™ Tester", callback_data: `testfixed_${row.id}` }],
      ];

      await bot.sendMessage(msg.chat.id, text, {
        reply_markup: { inline_keyboard: buttons },
      });
    }
  } catch (err) {
    console.error(err);
    bot.sendMessage(msg.chat.id, "‚ùå Erreur lors de la r√©cup√©ration.");
  }
});

// === Gestion des boutons ===
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id.toString();
  const data = query.data;

  try {
    if (data.startsWith("deletefixed_")) {
      const id = data.split("_")[1];
      await pool.query("DELETE FROM message_fixes WHERE id=$1", [id]);
      await bot.sendMessage(chatId, `üóë Message ID ${id} supprim√©.`);
    } else if (data.startsWith("testfixed_")) {
      const id = data.split("_")[1];
      const { rows } = await pool.query(
        "SELECT * FROM message_fixes WHERE id=$1",
        [id]
      );
      const row = rows[0];

      if (!row) {
        await bot.sendMessage(chatId, "‚ùå Message introuvable.");
      } else {
        if (row.media_type === "photo") {
          await bot.sendPhoto(chatId, row.media_url, {
            caption: row.media_text,
          });
        } else if (row.media_type === "video") {
          await bot.sendVideo(chatId, row.media_url, {
            caption: row.media_text,
          });
        } else if (row.media_type === "voice") {
          await bot.sendVoice(chatId, row.media_url);
          await bot.sendMessage(chatId, row.media_text);
        } else if (row.media_type === "audio") {
          await bot.sendAudio(chatId, row.media_url);
          await bot.sendMessage(chatId, row.media_text);
        } else if (row.media_url?.startsWith("http")) {
          await bot.sendMessage(chatId, row.media_text);
        } else {
          await bot.sendMessage(chatId, row.media_text);
        }
      }
    } else if (data.startsWith("editfixed_")) {
      const id = data.split("_")[1];
      editStates[userId] = { step: "awaiting_text", id };
      await bot.sendMessage(
        chatId,
        "‚úèÔ∏è Envoie le nouveau texte (caption) du message."
      );
    }

    await bot.answerCallbackQuery(query.id);
  } catch (err) {
    console.error("Erreur callback_query:", err);
    await bot.answerCallbackQuery(query.id, {
      text: "‚ùå Erreur interne",
      show_alert: true,
    });
  }
});

// === Suivi de la modification (√©tape texte puis heures) ===
bot.on("message", async (msg) => {
  const userId = msg.from.id.toString();
  const chatId = msg.chat.id;

  if (editStates[userId]) {
    const state = editStates[userId];

    if (state.step === "awaiting_text") {
      state.text = msg.text;
      state.step = "awaiting_hours";
      return bot.sendMessage(
        chatId,
        "‚è∞ Envoie les nouvelles heures au format HH:MM, s√©par√©es par virgules.\nExemple : 06:00, 14:30, 22:00"
      );
    }

    if (state.step === "awaiting_hours") {
      state.heures = msg.text;
      await pool.query(
        "UPDATE message_fixes SET media_text=$1, heures=$2 WHERE id=$3",
        [state.text, state.heures, state.id]
      );
      delete editStates[userId];
      return bot.sendMessage(
        chatId,
        `‚úÖ Message ID ${state.id} modifi√© avec succ√®s.`
      );
    }
  }
});



/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
